// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"context"
	"github.com/Mikens404/HSRSP/internal/domain"
	"sync"
)

// Ensure, that TrainRepositoryMock does implement domain.TrainRepository.
// If this is not the case, regenerate this file with moq.
var _ domain.TrainRepository = &TrainRepositoryMock{}

// TrainRepositoryMock is a mock implementation of domain.TrainRepository.
//
//	func TestSomethingThatUsesTrainRepository(t *testing.T) {
//
//		// make and configure a mocked domain.TrainRepository
//		mockedTrainRepository := &TrainRepositoryMock{
//			FindTrainInfoFunc: func(ctx context.Context, trainNumber int) (domain.Train, error) {
//				panic("mock out the FindTrainInfo method")
//			},
//		}
//
//		// use mockedTrainRepository in code that requires domain.TrainRepository
//		// and then make assertions.
//
//	}
type TrainRepositoryMock struct {
	// FindTrainInfoFunc mocks the FindTrainInfo method.
	FindTrainInfoFunc func(ctx context.Context, trainNumber int) (domain.Train, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindTrainInfo holds details about calls to the FindTrainInfo method.
		FindTrainInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TrainNumber is the trainNumber argument value.
			TrainNumber int
		}
	}
	lockFindTrainInfo sync.RWMutex
}

// FindTrainInfo calls FindTrainInfoFunc.
func (mock *TrainRepositoryMock) FindTrainInfo(ctx context.Context, trainNumber int) (domain.Train, error) {
	if mock.FindTrainInfoFunc == nil {
		panic("TrainRepositoryMock.FindTrainInfoFunc: method is nil but TrainRepository.FindTrainInfo was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		TrainNumber int
	}{
		Ctx:         ctx,
		TrainNumber: trainNumber,
	}
	mock.lockFindTrainInfo.Lock()
	mock.calls.FindTrainInfo = append(mock.calls.FindTrainInfo, callInfo)
	mock.lockFindTrainInfo.Unlock()
	return mock.FindTrainInfoFunc(ctx, trainNumber)
}

// FindTrainInfoCalls gets all the calls that were made to FindTrainInfo.
// Check the length with:
//
//	len(mockedTrainRepository.FindTrainInfoCalls())
func (mock *TrainRepositoryMock) FindTrainInfoCalls() []struct {
	Ctx         context.Context
	TrainNumber int
} {
	var calls []struct {
		Ctx         context.Context
		TrainNumber int
	}
	mock.lockFindTrainInfo.RLock()
	calls = mock.calls.FindTrainInfo
	mock.lockFindTrainInfo.RUnlock()
	return calls
}
