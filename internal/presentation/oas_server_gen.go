// Code generated by ogen, DO NOT EDIT.

package presentation

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetReservationInfo implements getReservationInfo operation.
	//
	// 個別の予約情報取得.
	//
	// GET /reservation
	GetReservationInfo(ctx context.Context, params GetReservationInfoParams) (*ReservationInfo, error)
	// GetReservationSeat implements getReservationSeat operation.
	//
	// 号車ごとの予約状況取得.
	//
	// GET /reservationSeat
	GetReservationSeat(ctx context.Context, params GetReservationSeatParams) (GetReservationSeatOK, error)
	// GetTrainInfo implements getTrainInfo operation.
	//
	// 列車情報の取得.
	//
	// GET /train
	GetTrainInfo(ctx context.Context, params GetTrainInfoParams) (*TrainInfo, error)
	// PatchReservation implements patchReservation operation.
	//
	// 予約情報更新.
	//
	// PATCH /reservation
	PatchReservation(ctx context.Context, req *PatchReservationReq, params PatchReservationParams) error
	// PostReservation implements postReservation operation.
	//
	// 予約情報の作成.
	//
	// POST /reservation
	PostReservation(ctx context.Context, req *PostReservationReq) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
