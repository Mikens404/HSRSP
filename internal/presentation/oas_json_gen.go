// Code generated by ogen, DO NOT EDIT.

package presentation

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s GetReservationSeatOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s GetReservationSeatOK) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		e.Bool(elem)
	}
}

// Decode decodes GetReservationSeatOK from json.
func (s *GetReservationSeatOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetReservationSeatOK to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem bool
		if err := func() error {
			v, err := d.Bool()
			elem = bool(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetReservationSeatOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GetReservationSeatOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetReservationSeatOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PatchReservationReqReservationStatus as json.
func (o OptPatchReservationReqReservationStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PatchReservationReqReservationStatus from json.
func (o *OptPatchReservationReqReservationStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPatchReservationReqReservationStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPatchReservationReqReservationStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPatchReservationReqReservationStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReservationInfoReservationStatus as json.
func (o OptReservationInfoReservationStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ReservationInfoReservationStatus from json.
func (o *OptReservationInfoReservationStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptReservationInfoReservationStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptReservationInfoReservationStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptReservationInfoReservationStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchReservationReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchReservationReq) encodeFields(e *jx.Encoder) {
	{
		if s.ReservationTrainNumber.Set {
			e.FieldStart("reservationTrainNumber")
			s.ReservationTrainNumber.Encode(e)
		}
	}
	{
		if s.BoardingStation.Set {
			e.FieldStart("boardingStation")
			s.BoardingStation.Encode(e)
		}
	}
	{
		if s.GetOffStation.Set {
			e.FieldStart("getOffStation")
			s.GetOffStation.Encode(e)
		}
	}
	{
		if s.ReservationSeatList != nil {
			e.FieldStart("reservationSeatList")
			e.ArrStart()
			for _, elem := range s.ReservationSeatList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ReservationPeople.Set {
			e.FieldStart("reservationPeople")
			s.ReservationPeople.Encode(e)
		}
	}
	{
		if s.ReservationStatus.Set {
			e.FieldStart("reservationStatus")
			s.ReservationStatus.Encode(e)
		}
	}
	{
		if s.CustomerInfo.Set {
			e.FieldStart("customerInfo")
			s.CustomerInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfPatchReservationReq = [7]string{
	0: "reservationTrainNumber",
	1: "boardingStation",
	2: "getOffStation",
	3: "reservationSeatList",
	4: "reservationPeople",
	5: "reservationStatus",
	6: "customerInfo",
}

// Decode decodes PatchReservationReq from json.
func (s *PatchReservationReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchReservationReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "reservationTrainNumber":
			if err := func() error {
				s.ReservationTrainNumber.Reset()
				if err := s.ReservationTrainNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationTrainNumber\"")
			}
		case "boardingStation":
			if err := func() error {
				s.BoardingStation.Reset()
				if err := s.BoardingStation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boardingStation\"")
			}
		case "getOffStation":
			if err := func() error {
				s.GetOffStation.Reset()
				if err := s.GetOffStation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"getOffStation\"")
			}
		case "reservationSeatList":
			if err := func() error {
				s.ReservationSeatList = make([]PatchReservationReqReservationSeatListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PatchReservationReqReservationSeatListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ReservationSeatList = append(s.ReservationSeatList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationSeatList\"")
			}
		case "reservationPeople":
			if err := func() error {
				s.ReservationPeople.Reset()
				if err := s.ReservationPeople.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationPeople\"")
			}
		case "reservationStatus":
			if err := func() error {
				s.ReservationStatus.Reset()
				if err := s.ReservationStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationStatus\"")
			}
		case "customerInfo":
			if err := func() error {
				s.CustomerInfo.Reset()
				if err := s.CustomerInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customerInfo\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchReservationReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchReservationReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchReservationReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PatchReservationReqReservationSeatListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PatchReservationReqReservationSeatListItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("carNumber")
		e.Int(s.CarNumber)
	}
	{
		e.FieldStart("seatNumber")
		e.Str(s.SeatNumber)
	}
}

var jsonFieldsNameOfPatchReservationReqReservationSeatListItem = [2]string{
	0: "carNumber",
	1: "seatNumber",
}

// Decode decodes PatchReservationReqReservationSeatListItem from json.
func (s *PatchReservationReqReservationSeatListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchReservationReqReservationSeatListItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carNumber":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.CarNumber = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carNumber\"")
			}
		case "seatNumber":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.SeatNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seatNumber\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PatchReservationReqReservationSeatListItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPatchReservationReqReservationSeatListItem) {
					name = jsonFieldsNameOfPatchReservationReqReservationSeatListItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PatchReservationReqReservationSeatListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchReservationReqReservationSeatListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PatchReservationReqReservationStatus as json.
func (s PatchReservationReqReservationStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PatchReservationReqReservationStatus from json.
func (s *PatchReservationReqReservationStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PatchReservationReqReservationStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PatchReservationReqReservationStatus(v) {
	case PatchReservationReqReservationStatusRESERVED:
		*s = PatchReservationReqReservationStatusRESERVED
	case PatchReservationReqReservationStatusPROVISIONAL:
		*s = PatchReservationReqReservationStatusPROVISIONAL
	case PatchReservationReqReservationStatusCANCELLED:
		*s = PatchReservationReqReservationStatusCANCELLED
	default:
		*s = PatchReservationReqReservationStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PatchReservationReqReservationStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PatchReservationReqReservationStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PostReservationReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PostReservationReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("reservationTrainNumber")
		e.Int(s.ReservationTrainNumber)
	}
	{
		e.FieldStart("boardingStation")
		e.Str(s.BoardingStation)
	}
	{
		e.FieldStart("getOffStation")
		e.Str(s.GetOffStation)
	}
	{
		e.FieldStart("reservationSeatList")
		e.ArrStart()
		for _, elem := range s.ReservationSeatList {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("reservationPeople")
		e.Int(s.ReservationPeople)
	}
	{
		e.FieldStart("customerInfo")
		e.Str(s.CustomerInfo)
	}
}

var jsonFieldsNameOfPostReservationReq = [6]string{
	0: "reservationTrainNumber",
	1: "boardingStation",
	2: "getOffStation",
	3: "reservationSeatList",
	4: "reservationPeople",
	5: "customerInfo",
}

// Decode decodes PostReservationReq from json.
func (s *PostReservationReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PostReservationReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "reservationTrainNumber":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.ReservationTrainNumber = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationTrainNumber\"")
			}
		case "boardingStation":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.BoardingStation = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boardingStation\"")
			}
		case "getOffStation":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.GetOffStation = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"getOffStation\"")
			}
		case "reservationSeatList":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.ReservationSeatList = make([]PostReservationReqReservationSeatListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PostReservationReqReservationSeatListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ReservationSeatList = append(s.ReservationSeatList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationSeatList\"")
			}
		case "reservationPeople":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Int()
				s.ReservationPeople = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationPeople\"")
			}
		case "customerInfo":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.CustomerInfo = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customerInfo\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PostReservationReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00111111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPostReservationReq) {
					name = jsonFieldsNameOfPostReservationReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PostReservationReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PostReservationReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PostReservationReqReservationSeatListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PostReservationReqReservationSeatListItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("carNumber")
		e.Int(s.CarNumber)
	}
	{
		e.FieldStart("seatNumber")
		e.Str(s.SeatNumber)
	}
}

var jsonFieldsNameOfPostReservationReqReservationSeatListItem = [2]string{
	0: "carNumber",
	1: "seatNumber",
}

// Decode decodes PostReservationReqReservationSeatListItem from json.
func (s *PostReservationReqReservationSeatListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PostReservationReqReservationSeatListItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carNumber":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.CarNumber = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carNumber\"")
			}
		case "seatNumber":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.SeatNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seatNumber\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PostReservationReqReservationSeatListItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPostReservationReqReservationSeatListItem) {
					name = jsonFieldsNameOfPostReservationReqReservationSeatListItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PostReservationReqReservationSeatListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PostReservationReqReservationSeatListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ReservationInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ReservationInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ReservationNumber.Set {
			e.FieldStart("reservationNumber")
			s.ReservationNumber.Encode(e)
		}
	}
	{
		if s.ReservationTrainNumber.Set {
			e.FieldStart("reservationTrainNumber")
			s.ReservationTrainNumber.Encode(e)
		}
	}
	{
		if s.BoardingStation.Set {
			e.FieldStart("boardingStation")
			s.BoardingStation.Encode(e)
		}
	}
	{
		if s.GetOffStation.Set {
			e.FieldStart("getOffStation")
			s.GetOffStation.Encode(e)
		}
	}
	{
		if s.ReservationSeatList != nil {
			e.FieldStart("reservationSeatList")
			e.ArrStart()
			for _, elem := range s.ReservationSeatList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.ReservationPeople.Set {
			e.FieldStart("reservationPeople")
			s.ReservationPeople.Encode(e)
		}
	}
	{
		if s.ReservationStatus.Set {
			e.FieldStart("reservationStatus")
			s.ReservationStatus.Encode(e)
		}
	}
	{
		if s.CustomerInfo.Set {
			e.FieldStart("customerInfo")
			s.CustomerInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfReservationInfo = [9]string{
	0: "reservationNumber",
	1: "reservationTrainNumber",
	2: "boardingStation",
	3: "getOffStation",
	4: "reservationSeatList",
	5: "amount",
	6: "reservationPeople",
	7: "reservationStatus",
	8: "customerInfo",
}

// Decode decodes ReservationInfo from json.
func (s *ReservationInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReservationInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "reservationNumber":
			if err := func() error {
				s.ReservationNumber.Reset()
				if err := s.ReservationNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationNumber\"")
			}
		case "reservationTrainNumber":
			if err := func() error {
				s.ReservationTrainNumber.Reset()
				if err := s.ReservationTrainNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationTrainNumber\"")
			}
		case "boardingStation":
			if err := func() error {
				s.BoardingStation.Reset()
				if err := s.BoardingStation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"boardingStation\"")
			}
		case "getOffStation":
			if err := func() error {
				s.GetOffStation.Reset()
				if err := s.GetOffStation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"getOffStation\"")
			}
		case "reservationSeatList":
			if err := func() error {
				s.ReservationSeatList = make([]ReservationInfoReservationSeatListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ReservationInfoReservationSeatListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ReservationSeatList = append(s.ReservationSeatList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationSeatList\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "reservationPeople":
			if err := func() error {
				s.ReservationPeople.Reset()
				if err := s.ReservationPeople.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationPeople\"")
			}
		case "reservationStatus":
			if err := func() error {
				s.ReservationStatus.Reset()
				if err := s.ReservationStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservationStatus\"")
			}
		case "customerInfo":
			if err := func() error {
				s.CustomerInfo.Reset()
				if err := s.CustomerInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customerInfo\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ReservationInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ReservationInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReservationInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ReservationInfoReservationSeatListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ReservationInfoReservationSeatListItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("carNumber")
		e.Int(s.CarNumber)
	}
	{
		e.FieldStart("seatNumber")
		e.Str(s.SeatNumber)
	}
}

var jsonFieldsNameOfReservationInfoReservationSeatListItem = [2]string{
	0: "carNumber",
	1: "seatNumber",
}

// Decode decodes ReservationInfoReservationSeatListItem from json.
func (s *ReservationInfoReservationSeatListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReservationInfoReservationSeatListItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "carNumber":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.CarNumber = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"carNumber\"")
			}
		case "seatNumber":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.SeatNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seatNumber\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ReservationInfoReservationSeatListItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfReservationInfoReservationSeatListItem) {
					name = jsonFieldsNameOfReservationInfoReservationSeatListItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ReservationInfoReservationSeatListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReservationInfoReservationSeatListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReservationInfoReservationStatus as json.
func (s ReservationInfoReservationStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ReservationInfoReservationStatus from json.
func (s *ReservationInfoReservationStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReservationInfoReservationStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ReservationInfoReservationStatus(v) {
	case ReservationInfoReservationStatusRESERVED:
		*s = ReservationInfoReservationStatusRESERVED
	case ReservationInfoReservationStatusPROVISIONAL:
		*s = ReservationInfoReservationStatusPROVISIONAL
	case ReservationInfoReservationStatusCANCELLED:
		*s = ReservationInfoReservationStatusCANCELLED
	default:
		*s = ReservationInfoReservationStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ReservationInfoReservationStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReservationInfoReservationStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrainInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrainInfo) encodeFields(e *jx.Encoder) {
	{
		if s.TrainNumber.Set {
			e.FieldStart("trainNumber")
			s.TrainNumber.Encode(e)
		}
	}
	{
		if s.TimeTable != nil {
			e.FieldStart("timeTable")
			e.ArrStart()
			for _, elem := range s.TimeTable {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTrainInfo = [2]string{
	0: "trainNumber",
	1: "timeTable",
}

// Decode decodes TrainInfo from json.
func (s *TrainInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrainInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "trainNumber":
			if err := func() error {
				s.TrainNumber.Reset()
				if err := s.TrainNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"trainNumber\"")
			}
		case "timeTable":
			if err := func() error {
				s.TimeTable = make([]TrainInfoTimeTableItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TrainInfoTimeTableItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TimeTable = append(s.TimeTable, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timeTable\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrainInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrainInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrainInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrainInfoTimeTableItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrainInfoTimeTableItem) encodeFields(e *jx.Encoder) {
	{
		if s.Station.Set {
			e.FieldStart("station")
			s.Station.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("time")
			s.Time.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfTrainInfoTimeTableItem = [2]string{
	0: "station",
	1: "time",
}

// Decode decodes TrainInfoTimeTableItem from json.
func (s *TrainInfoTimeTableItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrainInfoTimeTableItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "station":
			if err := func() error {
				s.Station.Reset()
				if err := s.Station.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"station\"")
			}
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrainInfoTimeTableItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrainInfoTimeTableItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrainInfoTimeTableItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
