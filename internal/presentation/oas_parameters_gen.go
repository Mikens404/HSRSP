// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetReservationInfoParams is parameters of getReservationInfo operation.
type GetReservationInfoParams struct {
	// 予約番号.
	ReservationNumber int
}

func unpackGetReservationInfoParams(packed middleware.Parameters) (params GetReservationInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "reservationNumber",
			In:   "query",
		}
		params.ReservationNumber = packed[key].(int)
	}
	return params
}

func decodeGetReservationInfoParams(args [0]string, argsEscaped bool, r *http.Request) (params GetReservationInfoParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: reservationNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reservationNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReservationNumber = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reservationNumber",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTrainInfoParams is parameters of getTrainInfo operation.
type GetTrainInfoParams struct {
	// 列車番号.
	TrainNumber int
}

func unpackGetTrainInfoParams(packed middleware.Parameters) (params GetTrainInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "trainNumber",
			In:   "path",
		}
		params.TrainNumber = packed[key].(int)
	}
	return params
}

func decodeGetTrainInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTrainInfoParams, _ error) {
	// Decode path: trainNumber.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "trainNumber",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.TrainNumber = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "trainNumber",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PatchReservationParams is parameters of patchReservation operation.
type PatchReservationParams struct {
	// 変更する予約情報番号.
	ReservationNumber int
}

func unpackPatchReservationParams(packed middleware.Parameters) (params PatchReservationParams) {
	{
		key := middleware.ParameterKey{
			Name: "reservationNumber",
			In:   "query",
		}
		params.ReservationNumber = packed[key].(int)
	}
	return params
}

func decodePatchReservationParams(args [0]string, argsEscaped bool, r *http.Request) (params PatchReservationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: reservationNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "reservationNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ReservationNumber = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "reservationNumber",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
